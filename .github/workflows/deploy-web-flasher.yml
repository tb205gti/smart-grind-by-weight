name: Deploy Web Flasher

on:
  push:
    branches: [ main ]
    paths:
      - 'tools/web-flasher/**'  # Deploy when web-flasher files change (after firmware commit)
  release:
    types: [ unpublished, deleted ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read
  deployments: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Populate firmware assets from releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          rm -rf tools/web-flasher/firmware
          mkdir -p tools/web-flasher/firmware

          REPO="${{ github.repository }}"
          echo "Fetching release list for $REPO"

          tags=$(gh api \
            -H "Accept: application/vnd.github+json" \
            --paginate \
            "/repos/${REPO}/releases?per_page=100" \
            --jq 'map(select(.draft == false)) | .[].tag_name')

          if [ -z "$tags" ]; then
            echo "No published releases found"
            exit 0
          fi

          for tag in $tags; do
            tag_start=$(date +%s)
            download_dir="tools/web-flasher/firmware/${tag}"
            mkdir -p "$download_dir"
            echo "[$(date -u +%H:%M:%S)] Downloading assets for $tag"
            gh release download "$tag" \
              --repo "$REPO" \
              --dir "$download_dir" \
              --clobber
            tag_end=$(date +%s)
            echo "[$(date -u +%H:%M:%S)] Finished $tag in $((tag_end - tag_start))s"
          done

          python3 - <<'PY'
          if True:
              import json
              import os
              import time
              import urllib.request

              firmware_root = "tools/web-flasher/firmware"
              entries = []

              def wait_for(url, retries=30, delay=30):
                  for attempt in range(retries):
                      try:
                          with urllib.request.urlopen(url) as response:
                              if response.status == 200:
                                  print(f"  [OK] {url} (attempt {attempt + 1})")
                                  return True
                      except Exception:
                          print(f"  [WAIT] {url} (attempt {attempt + 1})")
                      time.sleep(delay)
                  total = retries * delay
                  minutes = total // 60
                  print(f"  [FAIL] {url} after {retries} attempts (~{minutes}m)")
                  return False

              for tag in sorted(os.listdir(firmware_root), reverse=True):
                  tag_path = os.path.join(firmware_root, tag)
                  if not os.path.isdir(tag_path):
                      continue

                  base = f"smart-grind-by-weight-{tag}"
                  manifest_rel = f"firmware/{tag}/{base}.manifest.json"
                  ota_rel = f"firmware/{tag}/{base}-web-ota.bin"

                  manifest_abs = os.path.join(tag_path, f"{base}.manifest.json")
                  ota_abs = os.path.join(tag_path, f"{base}-web-ota.bin")

                  if not (os.path.isfile(manifest_abs) and os.path.isfile(ota_abs)):
                      continue

                  prerelease = any(key in tag for key in ("-rc", "-beta", "-alpha"))
                  version = tag.lstrip('v')

                  manifest_url = f"https://jaapp.github.io/smart-grind-by-weight/{manifest_rel}"
                  ota_url = f"https://jaapp.github.io/smart-grind-by-weight/{ota_rel}"

                  if not wait_for(manifest_url) or not wait_for(ota_url):
                      continue

                  entries.append({
                      "tag": tag,
                      "version": version,
                      "display": tag,
                      "prerelease": prerelease,
                      "manifest": manifest_rel,
                      "ota": ota_rel,
                  })

              index_path = os.path.join(firmware_root, "index.json")
              with open(index_path, "w", encoding="utf-8") as handle:
                  json.dump(entries, handle, indent=2)
                  handle.write("\n")
          PY
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages-${{ github.run_id }}
          path: ./tools/web-flasher

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ github.run_id }}

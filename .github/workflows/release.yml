name: Build and Release Firmware

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3

permissions:
  contents: write
  actions: write
  
jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for changelog
    
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
    
      - name: Install PlatformIO
        run: |
          pip install platformio
    
      - name: Build firmware
        run: |
          # Use platformio directly like local development to ensure identical build
          # Install dependencies first to ensure exact versions
          pio pkg install
          pio run -e waveshare-esp32s3-touch-amoled-164
        
      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts
          VERSION=${{ github.ref_name }}

          # Copy firmware binaries with versioned names
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/firmware.bin release-artifacts/smart-grind-by-weight-${VERSION}.bin
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/bootloader.bin release-artifacts/smart-grind-by-weight-${VERSION}-bootloader.bin
          cp .pio/build/waveshare-esp32s3-touch-amoled-164/partitions.bin release-artifacts/smart-grind-by-weight-${VERSION}-partitions.bin

          # Create blank 8KB NVS partition file (0xe000 to 0x10000)
          dd if=/dev/zero of=release-artifacts/blank_8KB.bin bs=8192 count=1

          # Generate web-specific OTA patch file
          pip install detools
          echo "Generating web OTA patch for smart-grind-by-weight-${VERSION}.bin"
          touch empty.bin
          detools create_patch -c heatshrink empty.bin "release-artifacts/smart-grind-by-weight-${VERSION}.bin" "release-artifacts/smart-grind-by-weight-${VERSION}-web-ota.bin"
          echo "Web OTA patch created: smart-grind-by-weight-${VERSION}-web-ota.bin ($(du -h "release-artifacts/smart-grind-by-weight-${VERSION}-web-ota.bin" | cut -f1))"

          # Generate manifest file
          echo "Generating manifest file..."
          cd release-artifacts
          VERSION_NUMBER=$(echo "${VERSION}" | sed 's/^v//')

          cat > "smart-grind-by-weight-${VERSION}.manifest.json" << EOF
          {
            "name": "Smart Grind By Weight",
            "version": "${VERSION_NUMBER}",
            "home_assistant_domain": "grinder",
            "new_install_skip_erase": true,
            "builds": [
              {
                "chipFamily": "ESP32-S3",
                "parts": [
                  {
                    "path": "smart-grind-by-weight-${VERSION}-bootloader.bin",
                    "offset": 0
                  },
                  {
                    "path": "smart-grind-by-weight-${VERSION}-partitions.bin",
                    "offset": 32768
                  },
                  {
                    "path": "blank_8KB.bin",
                    "offset": 57344
                  },
                  {
                    "path": "smart-grind-by-weight-${VERSION}.bin",
                    "offset": 3276800
                  }
                ]
              }
            ]
          }
          EOF
          echo "Generated manifest: smart-grind-by-weight-${VERSION}.manifest.json"

          # Create a firmware package
          tar -czf smart-grind-by-weight-${VERSION}.tar.gz *.bin *.manifest.json
          cd ..

      - name: Prepare release notes
        id: changelog
        run: |
          # Create simple release notes with installation instructions
          cat > release-notes.md << EOF
          ## Installation

          ### Web Installer (Recommended)
          Visit [Web Installer](https://tb205gti.github.io/smart-grind-by-weight/) and select firmware version ${{ github.ref_name }}

          **Note:** Requires Chrome/Edge (desktop or Android). iOS/Safari not supported.

          ### Command Line (Alternative)
          1. Download \`smart-grind-by-weight-${{ github.ref_name }}.bin\` below
          2. Use the grinder tool to upload: \`python3 tools/grinder.py upload smart-grind-by-weight-${{ github.ref_name }}.bin\`

          ## Build Information
          - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Commit: ${{ github.sha }}
          - Tag: ${{ github.ref_name }}
          EOF

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      - name: Create or update draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TAG=${{ github.ref_name }}
          TITLE=${TAG}

          # Default to stable release; override when tag indicates prerelease
          IS_PRERELEASE="false"

          # Detect if this is a prerelease (RC, alpha, beta, etc.)
          if [[ "$TAG" == *"-rc."* ]] || [[ "$TAG" == *"-alpha"* ]] || [[ "$TAG" == *"-beta"* ]]; then
            IS_PRERELEASE="true"
          fi

          echo "IS_PRERELEASE=${IS_PRERELEASE}" >> "$GITHUB_ENV"

          if [ "${IS_PRERELEASE}" = "true" ]; then
            PRERELEASE_CREATE_FLAG="--prerelease"
            PRERELEASE_EDIT_FLAG="--prerelease=true"
          else
            PRERELEASE_CREATE_FLAG=""
            PRERELEASE_EDIT_FLAG="--prerelease=false"
          fi

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists. Updating notes and draft state."
            gh release edit "$TAG" --draft=true $PRERELEASE_EDIT_FLAG --title "$TITLE" --notes-file release-notes.md
          else
            echo "Creating new draft release $TAG"
            gh release create "$TAG" --draft $PRERELEASE_CREATE_FLAG --title "$TITLE" --notes-file release-notes.md
          fi

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          TAG=${{ github.ref_name }}
          IS_PRERELEASE=${IS_PRERELEASE:-false}

          echo "Uploading firmware assets for $TAG (prerelease: ${IS_PRERELEASE})"
          gh release upload "$TAG" "release-artifacts/smart-grind-by-weight-${TAG}.bin" --clobber
          gh release upload "$TAG" "release-artifacts/smart-grind-by-weight-${TAG}-bootloader.bin" --clobber
          gh release upload "$TAG" "release-artifacts/smart-grind-by-weight-${TAG}-partitions.bin" --clobber
          gh release upload "$TAG" "release-artifacts/smart-grind-by-weight-${TAG}-web-ota.bin" --clobber
          gh release upload "$TAG" "release-artifacts/smart-grind-by-weight-${TAG}.manifest.json" --clobber
          gh release upload "$TAG" "release-artifacts/blank_8KB.bin" --clobber
          gh release upload "$TAG" "release-artifacts/smart-grind-by-weight-${TAG}.tar.gz" --clobber
